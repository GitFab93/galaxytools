<tool id="fcs-genome" name="fcs-genome" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
    <description>genome assembly QC</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro='requirements' />
    <command detect_errors="exit_code"><![CDATA[
        mkdir -p './outputdir' &&
        #if $mode_conditional.selector == "Adaptor"
            '$__tool_directory__/run_fcsadaptor.sh' --fasta-input $mode_conditional.fasta --output-dir './outputdir'
            #if $mode_conditional.selector1 == "Eukaryote"
                --euk
            #end if
            #if $mode_conditional.selector1 == "Prokaryote"
                --prok
            #end if
            && tar -zcf ./outputdir.tgz './outputdir'
        #end if

        #if $mode_conditional.selector == "GX"
            python3 ./$mode_conditional.fcsgx --fasta $mode_conditional.fasta --out-dir './outputdir' --gx-db "${SHM_LOC}/gxdb/all" --split-fasta --tax-id $mode_conditional.fasta
            && tar -zcf ./outputdir.tgz './outputdir'
        #end if
]]></command>
    <inputs>
        <conditional name="mode_conditional">
            <param name="selector" type="select" label="Select mode" help="Select a fcs-genome module">
                <option value="adaptor">FCS-Adaptor</option>
                <option value="GX">FCS-GX</option>
            </param>
            <when value="adaptor">
            <param argument="--fasta-input" type="data" format="fasta" label="FASTA File" help=""/>
                <param name="selector1" type="select" label="Choose if Eukaryote or Prokaryote">
                    <option value="Eukaryote">Eukaryote</option>
                    <option value="Prokayote">Prokaryote</option>
                </param>
            </when>
            <when value="GX">
                <param name="fcsgx" type="file" label="Run_FCS_gx_script" help=""/>
                <param argument="--tax-id" type="integer" label="TaxID" help=""/>
                <param argument="--fasta" type="data" format="fasta" label="FASTA File" help=""/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="av_screen" format="log" from_work_dir="./outputdir" label="${tool.name} on ${on_string}: outputdir">
            <filter>mode_conditional['selector'] == 'Adaptor'</filter>
        </data>
        <data name="cleaned_sequences/fcsadaptor_prok_test" format="fa.gz" from_work_dir="./outputdir" label="${tool.name} on ${on_string}: outputdir">
            <filter>mode_conditional['selector'] == 'Adaptor'</filter>
        </data>
        <data name="combined.calls" format="jsonl" from_work_dir="./outputdir" label="${tool.name} on ${on_string}: outputdir">
            <filter>mode_conditional['selector'] == 'Adaptor'</filter>
        </data>
        <data name="fcs" format="log" from_work_dir="./outputdir" label="${tool.name} on ${on_string}: outputdir">
            <filter>mode_conditional['selector'] == 'Adaptor'</filter>
        </data>
        <data name="fcs_adaptor_report" format="txt" from_work_dir="./outputdir" label="${tool.name} on ${on_string}: outputdir">
            <filter>mode_conditional['selector'] == 'Adaptor'</filter>
        </data>
        <data name="logs" format="jsonl" from_work_dir="./outputdir" label="${tool.name} on ${on_string}: outputdir">
            <filter>mode_conditional['selector'] == 'Adaptor'</filter>
        </data>
        <data name="pipeline_args" format="yaml" from_work_dir="./outputdir" label="${tool.name} on ${on_string}: outputdir">
            <filter>mode_conditional['selector'] == 'Adaptor'</filter>
        </data>
        <data name="skipped_trims" format="jsonl" from_work_dir="./outputdir" label="${tool.name} on ${on_string}: outputdir">
            <filter>mode_conditional['selector'] == 'Adaptor'</filter>
        </data>
        <data name="validate_fasta" format="txt" from_work_dir="./outputdir" label="${tool.name} on ${on_string}: outputdir">
            <filter>mode_conditional['selector'] == 'Adaptor'</filter>
        </data>
        <data name="outputdir" format="tgz" from_work_dir="./outputdir.tgz" label="${tool.name} on ${on_string}: outputdir.tgz"/>
    </outputs>
    <tests>
        <test>
        </test>
    </tests>
    <help><![CDATA[
    help section
    ]]></help>
    <expand macro="citations"/>
</tool>